
********************************************************************************************************************************************************************************
PreOrder Insertion

class PreOrderTree{
     static class Node{
        int data;
        Node left;
        Node right;
        Node(int data){
            this.data = data;
            right = left = null;
        }
    }
    
    //tree Builder Code
    
    int index = -1;
    public Node buildTree(int [] nodes){
        index++;
        if(nodes[index] == -1){
            return null;
        }
        Node newNode = new Node(nodes[index]);
        newNode.left = buildTree(nodes);
        newNode.right = buildTree(nodes);
        return newNode; 
    }
    
    public void preOrder(Node node){
        if(node != null){
            System.out.print(node.data +" ");
            preOrder(node.left);
            preOrder(node.right);
        }
    }
}
public class Main
{
	public static void main(String[] args) {
	    int [] nodes = {1,2,4,-1,-1,5,-1,-1,3,-1,6,-1,-1};
	    PreOrderTree pot = new PreOrderTree();
	    PreOrderTree.Node node = pot.buildTree(nodes);
	    pot.preOrder(node);
	}
}

****************************************************************************************************************************************************************************
