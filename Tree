
********************************************************************************************************************************************************************************
PreOrder Insertion

class PreOrderTree{
     static class Node{
        int data;
        Node left;
        Node right;
        Node(int data){
            this.data = data;
            right = left = null;
        }
    }
    
    //tree Builder Code
    
    int index = -1;
    public Node buildTree(int [] nodes){
        index++;
        if(nodes[index] == -1){
            return null;
        }
        Node newNode = new Node(nodes[index]);
        newNode.left = buildTree(nodes);
        newNode.right = buildTree(nodes);
        return newNode; 
    }
    
    public void preOrder(Node node){
        if(node != null){
            System.out.print(node.data +" ");
            preOrder(node.left);
            preOrder(node.right);
        }
    }
}
public class Main
{
	public static void main(String[] args) {
	    int [] nodes = {1,2,4,-1,-1,5,-1,-1,3,-1,6,-1,-1};
	    PreOrderTree pot = new PreOrderTree();
	    PreOrderTree.Node node = pot.buildTree(nodes);
	    pot.preOrder(node);
	}
}

****************************************************************************************************************************************************************************

Search, Leaves Count , Root Balanced 
import java.util.*;
class BinaryTree{
    class Node{
        int data;
        Node right,left;
        Node(int data){
            this.data = data;
            right = null;
            left = null;
        }
    }
        int index = -1;
        public Node binaryTreeBuilder(int [] nodes){
            index++;
            if(nodes[index] == -1){
                return null;
            }
            Node newNode = new Node(nodes[index]);
            newNode.left = binaryTreeBuilder(nodes);
            newNode.right = binaryTreeBuilder(nodes);
            
            return newNode;            
        }
        
        public int countNode (Node node){
            if(node == null){
                return 0;
            }
            int leftNode = countNode(node.left);
            int rightNode = countNode(node.right);
            
            return leftNode+rightNode + 1;
        }
        public int height(Node node){
            if(node == null){
                return 0;
            }
            int leftHeight = height(node.left);
            int rightHeight = height(node.right);
            
            return Math.max(leftHeight,rightHeight) + 1;
        }
        public boolean isBalanced(Node node){
            if(node == null){
                return true;
            }
            int leftHeight = height(node.left);
            int rightHeight = height(node.right);
            if(Math.abs(leftHeight-rightHeight) <= 1){
                return true;
            }else{
                return false;
            }
        }
        
        
        public int CountLeaves(Node node){
            if(node == null) return 0;
            if(node.left == null && node.right == null) return 1;
            
            int CCL = CountLeaves(node.left);
            int CCR = CountLeaves(node.right);
            return CCL + CCR;
        }
        
        public boolean search(int target,Node node){
            if(node == null){
                return false;
            }
            if(node.data == target){
                return true;
            }
            boolean searchleft = search(target , node.left);
            boolean searchRight = search(target , node.right);
            
            return searchleft || searchRight ;
        }
        
        public void printNode(Node node){
            if(node != null){
                System.out.print(node.data+" ");
                printNode(node.left);
                printNode(node.right);
            }
        }
        
}
public class Main
{
	public static void main(String[] args) {
	    int[] nodes = {1, 2, 4, -1, -1, 5, -1, -1, 3, 6, -1, -1, 7, -1, -1};
		BinaryTree bt = new BinaryTree();
		BinaryTree.Node node = bt.binaryTreeBuilder(nodes);
		bt.printNode(node);
		System.out.println();
		System.out.println("Count Node " +bt.countNode(node));
		System.out.println("Count Leaves "+bt.CountLeaves(node));
		System.out.println("Node present ? :  "+bt.search(6,node));
		System.out.println("Node Height ? :  "+bt.height(node));
		System.out.println("Node Height ? :  "+bt.isBalanced(node));
	}
}

**********************************************************************************************************************

N ary Tree
import java.util.*;
class Node{
    int data;
    List <Node> child;
    Node(int data){
        this.data = data;
        child = new ArrayList<>();
    }
}
class NaryTree{
        Node root = null;
        NaryTree(int val){
            root = new Node(val);
        }
        public void insert(Node node , int val){
            Node newNode = new Node(val);
            node.child.add(newNode);
        }
        public void preOrder(Node node){
            if(node == null) return;
            System.out.print(node.data+" ");
            for(Node i : node.child){
                preOrder(i);
            }
        }
}
public class Main
{
	public static void main(String[] args) {
		NaryTree nt = new NaryTree(10);
		Node root = nt.root;
		nt.insert(root,20);
		nt.insert(root,30);
		nt.insert(root,40);
		nt.insert(root,50);
		nt.insert(root.child.get(1),60);
		nt.insert(root.child.get(1),70);
		nt.preOrder(root);
	}
}
*******************************************************************************************************************************************************************
Building a Tree with PreOrder and InOrder Array

class Node{
    int data;
    Node right;
    Node left;
    Node(int val){
        data= val;
        left = null;
        right = null;
    }
}

class BinaryTree{
    int preIndex = 0;
    Node root = null;
    public int Indexfinder(int [] inOrder, int startIndex ,int  endIndex,int target){
        for(int i = startIndex ; i<= endIndex ; i++){
            if(target == inOrder[i]){
                return i;
            }
        }
        return -1;
    }
    
    public Node TreeBuilderHelper(int[] preOrder,int [] inOrder,int startIndex ,int endIndex){
        
        if(startIndex > endIndex){
            return null;
        }
        
        int rootValue = preOrder[preIndex++];
        Node rootNode = new Node(rootValue);
        int inIndex = Indexfinder(inOrder ,startIndex , endIndex, rootValue);
        rootNode.left = TreeBuilderHelper(preOrder,inOrder,startIndex,inIndex-1);
        rootNode.right = TreeBuilderHelper(preOrder,inOrder,inIndex+1,endIndex);
        
        return rootNode;
    }
    
    public Node TreeBuilder(int[] preOrder,int [] inOrder){
        Node root = TreeBuilderHelper(preOrder,inOrder,0,inOrder.length-1);
        return root;
    }
    
    public void PreOrderDisplay(Node node){
        if(node == null) return ;
        System.out.print(node.data+" ");
        PreOrderDisplay(node.left);
        PreOrderDisplay(node.right);
    }
}

public class Main
{
	public static void main(String[] args) {
		int []preOrder = {10, 12, 3, 4, 5, 6};
		int [] inOrder  = {3, 12, 10, 5, 4, 6};

		BinaryTree bt = new BinaryTree();
		Node root =bt.TreeBuilder(preOrder,inOrder);
		bt.PreOrderDisplay(root);
	}
}


********************************************************************************************************************************
Building Tree with Post Order and In order

class Node{
    int data;
    Node right;
    Node left;
    Node(int val){
        data= val;
        left = null;
        right = null;
    }
}

class BinaryTree{
    int postIndex;
    Node root = null;
    public int Indexfinder(int [] inOrder, int startIndex ,int  endIndex,int target){
        for(int i = startIndex ; i<= endIndex ; i++){
            if(target == inOrder[i]){
                return i;
            }
        }
        return -1;
    }
    
    public Node TreeBuilderHelper(int[] postOrder,int [] inOrder,int startIndex ,int endIndex){
        
        if(startIndex > endIndex){
            return null;
        }
        
        int rootValue = postOrder[postIndex--];
        Node rootNode = new Node(rootValue);
        int inIndex = Indexfinder(inOrder ,startIndex , endIndex, rootValue);
        rootNode.right = TreeBuilderHelper(postOrder,inOrder,inIndex+1,endIndex);
        rootNode.left = TreeBuilderHelper(postOrder,inOrder,startIndex,inIndex-1);
        
        return rootNode;
    }
    
    public Node TreeBuilder(int[] postOrder,int [] inOrder){
        postIndex =inOrder.length-1;
        Node root = TreeBuilderHelper(postOrder,inOrder,0,inOrder.length-1);
        return root;
    }
    
    public void PostOrderDisplay(Node node){
        if(node == null) return ;
        PostOrderDisplay(node.left);
        PostOrderDisplay(node.right);
        System.out.print(node.data+" ");
    }
}

public class Main
{
	public static void main(String[] args) {
		int [] postOrder = {2,3,1};
		int [] inOrder  = {2,1,3};

		BinaryTree bt = new BinaryTree();
		Node root =bt.TreeBuilder(postOrder,inOrder);
		bt.PostOrderDisplay(root);
	}
}


********************************************************************************************************************************************************************

Binary Search Tree : 
Insert With recursion 

class Node{
    int data;
    Node right, left;
    Node(int val){
        data = val;
        right = left = null;
    }
}

class BinarySearchTree{
    Node root;
    BinarySearchTree(int val){
        root = new Node(val);
    }
    public void insert(int value){
        root = insertHelper(root,value);
    }
    
    public Node insertHelper(Node node, int value){
        if(node == null){
            Node newNode = new Node(value);
            return newNode;
        }
        if(value < node.data){
            node.left = insertHelper(node.left,value);
        }else{
            node.right = insertHelper(node.right,value);
        }
        return node;
    }
    
    public boolean search(Node node,int target){
        if(node == null) return false;
        if(node.data == target) return true;
        if(target < node.data){
            return search(node.left,target);
        }else{
            return search(node.right,target);
        }
        // return false;
    }
    
    public void PrintInorder(Node node){
        if(node == null){
            return;
        }
        
        PrintInorder(node.left);
        System.out.print(node.data+" ");
        PrintInorder(node.right);
        
    }
}

public class Main
{
	public static void main(String[] args) {
		BinarySearchTree BST = new BinarySearchTree(50);
		BST.insert(10);
		BST.insert(60);
		BST.insert(600);
		BST.insert(100);
		Node root = BST.root;insert
	    BST.PrintInorder(root);
	    System.out.println(BST.search(root,10));
	}
}


********************************************************************************************************************************************************************

Binary Search Tree : 
Insert With Iteration 

class Node{
    int data;
    Node right, left;
    Node(int val){
        data = val;
        right = left = null;
    }
}

class BinarySearchTree{
    Node root;
    BinarySearchTree(int val){
        root = new Node(val);
    }
    public void insert(int value){
        Node newNode = new Node(value);
        Node traversal = root;
        while(traversal!= null){
            if(traversal.data > value){
                if(traversal.left == null){
                    traversal.left = newNode;
                    break;
                }else{
                    traversal = traversal.left;
                }
            }else{
                if(traversal.right == null){
                    traversal.right = newNode;
                    break;
                }else{
                    traversal = traversal.right;
                }
            }
        }
    }
    
    
    public boolean search(Node node,int target){
        if(node == null) return false;
        if(node.data == target) return true;
        if(target < node.data){
            return search(node.left,target);
        }else{
            return search(node.right,target);
        }
        // return false;
    }
    
    public void PrintInorder(Node node){
        if(node == null){
            return;
        }
        
        PrintInorder(node.left);
        System.out.print(node.data+" ");
        PrintInorder(node.right);
        
    }
}

public class Main
{
	public static void main(String[] args) {
		BinarySearchTree BST = new BinarySearchTree(50);
		BST.insert(10);
		BST.insert(60);
		BST.insert(600);
		BST.insert(100);
		Node root = BST.root;
	    BST.PrintInorder(root);
	    System.out.println(BST.search(root,10));
	}
}

